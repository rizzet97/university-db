#pragma once
#include <algorithm>
#include <array>
#include <map>
#include <memory>
#include <set>
#include <string>
#include <random>
#include "record.hpp"

class Generator {
public:
    
    std::set<std::string> firstNameMale {
        "Piotr",
        "Krzysztof",
        "Andrzej",
        "Tomasz",
        "Paweł",
        "Jan",
        "Michał",
        "Marcin",
        "Jakub",
        "Adam",
        "Marek",
        "Stanisław",
        "Łukasz",
        "Grzegorz",
        "Mateusz",
        "Wojciech",
        "Mariusz",
        "Dariusz",
        "Zbigniew",
        "Maciej",
        "Rafał",
        "Robert",
        "Jerzy",
        "Kamil",
        "Dawid",
        "Jacek",
        "Szymon",
        "Józef",
        "Kacper",
        "Ryszard",
        "Tadeusz",
        "Bartosz",
        "Jarosław",
        "Artur",
        "Sławomir",
        "Janusz",
        "Sebastian",
        "Mirosław",
        "Damian",
        "Patryk",
        "Henryk",
        "Daniel",
        "Przemysław",
        "Karol",
        "Roman",
        "Filip",
        "Antoni",
        "Kazimierz",
        "Adrian",
        "Aleksander"
    };
    std::set<std::string> firstNameFemale {
        "Anna",
        "Katarzyna",
        "Maria",
        "Małgorzata",
        "Agnieszka",
        "Barbara",
        "Ewa",
        "Magdalena",
        "Elżbieta",
        "Krystyna",
        "Joanna",
        "Aleksandra",
        "Monika",
        "Zofia",
        "Teresa",
        "Danuta",
        "Natalia",
        "Julia",
        "Karolina",
        "Marta",
        "Beata",
        "Dorota",
        "Halina",
        "Alicja",
        "Jadwiga",
        "Jolanta",
        "Janina",
        "Iwona",
        "Grażyna",
        "Paulina",
        "Irena",
        "Justyna",
        "Zuzanna",
        "Bożena",
        "Wiktoria",
        "Hanna",
        "Renata",
        "Urszula",
        "Agata",
        "Sylwia",
        "Helena",
        "Maja",
        "Patrycja",
        "Izabela",
        "Emilia",
        "Aneta",
        "Oliwia",
        "Weronika",
        "Ewelina",
        "Martyna"
    };
    std::set<std::string> lastNameMale {
        "Nowak",
        "Kowalski",
        "Wiśniewski",
        "Wójcik",
        "Kowalczyk",
        "Kamiński",
        "Lewandowski",
        "Zieliński",
        "Woźniak",
        "Szymański",
        "Dąbrowski",
        "Kozłowski",
        "Mazur",
        "Jankowski",
        "Kwiatkowski",
        "Wojciechowski",
        "Krawczyk",
        "Kaczmarek",
        "Piotrowski",
        "Grabowski",
        "Zając",
        "Pawłowski",
        "Król",
        "Michalski",
        "Wróbel",
        "Wieczorek",
        "Jabłoński",
        "Nowakowski",
        "Majewski",
        "Olszewski",
        "Dudek",
        "Stępień",
        "Jaworski",
        "Adamczyk",
        "Malinowski",
        "Górski",
        "Pawlak",
        "Nowicki",
        "Sikora",
        "Witkowski",
        "Rutkowski",
        "Walczak",
        "Baran",
        "Michalak",
        "Szewczyk",
        "Ostrowski",
        "Tomaszewski",
        "Zalewski",
        "Wróblewski",
        "Pietrzak"
    };
    std::set<std::string> lastNameFemale {
        "Nowak",
        "Kowalska",
        "Wiśniewska",
        "Wójcik",
        "Kowalczyk",
        "Kamińska",
        "Lewandowska",
        "Zielińska",
        "Szymańska",
        "Dąbrowska",
        "Woźniak",
        "Kozłowska",
        "Jankowska",
        "Mazur",
        "Kwiatkowska",
        "Wojciechowska",
        "Krawczyk",
        "Kaczmarek",
        "Piotrowska",
        "Grabowska",
        "Pawłowska",
        "Michalska",
        "Król",
        "Zając",
        "Wieczorek",
        "Jabłońska",
        "Wróbel",
        "Nowakowska",
        "Majewska",
        "Olszewska",
        "Adamczyk",
        "Jaworska",
        "Malinowska",
        "Stępień",
        "Dudek",
        "Górska",
        "Nowicka",
        "Witkowska",
        "Pawlak",
        "Sikora",
        "Walczak",
        "Rutkowska",
        "Michalak",
        "Szewczyk",
        "Ostrowska",
        "Baran",
        "Tomaszewska",
        "Zalewska",
        "Pietrzak",
        "Wróblewska"
    };
    std::set<std::string> streetName {
        "1 Maja",
        "3 Maja",
        "11 Listopada",
        "Akademicka",
        "gen. Władysława Andersa",
        "Armii Krajowej",
        "Balonowa",
        "Bankowa",
        "Bernardyńska",
        "Beskidzka",
        "Bielska",
        "Browarna",
        "Brzeska",
        "Bytomska",
        "Chłodna",
        "Chmielna",
        "Chłodna",
        "Fryderyka Chopina",
        "Bolesława Chrobrego",
        "Ciepła",
        "Stefana Czarnieckiego",
        "Częstochowska",
        "Jana Henryka Dąbrowskiego",
        "Długa",
        "Dworcowa",
        "Dyrekcyjna",
        "Fabryczna",
        "Floriańska",
        "Franciszkańska",
        "Francuska",
        "Aleksandra Fredry",
        "Gajowa",
        "Garbarska",
        "Garncarska",
        "Gdańska",
        "Gliniana",
        "Gliwicka",
        "Bartosza Głowackiego",
        "Graniczna",
        "Grodzka",
        "Grunwaldzka",
        "Hallera",
        "Hetmańska",
        "Jagiellońska",
        "Jana Pawła II",
        "Kamienna",
        "Karmelicka",
        "Jana Kasprowicza",
        "Katowicka",
        "Jana Kilińskiego",
        "Kolejowa",
        "Mikołaja Kopernika",
        "Janusza Korczaka",
        "Tadeusza Kościuszki",
        "Krakowska",
        "Królewska",
        "Królowej Jadwigi",
        "Legionów",
        "Bolesława Limanowskiego",
        "Lipowa",
        "Lubelska",
        "Lwowska",
        "Łódzka",
        "Stanisława Małachowskiego",
        "Mariacka",
        "Adama Mickiewicza",
        "Mikołowska",
        "Miodowa",
        "Młyńska",
        "Stanisława Moniuszki",
        "Mostowa",
        "Nowa",
        "Ogrodowa",
        "Opolska",
        "Ignacego Paderewskiego",
        "Piekarska",
        "Piękna",
        "Józefa Piłsudskiego",
        "Pocztowa",
        "Pomorska",
        "Józefa Poniatowskiego",
        "Poznańska",
        "Prosta",
        "Bolesława Prusa",
        "Kazimierza Pułaskiego",
        "Racławicka",
        "Rajska",
        "Mikołaja Reja",
        "Władysława Reymonta",
        "Sandomierska",
        "Siemianowicka",
        "Henryka Sienkiewicza",
        "Władysława Sikorskiego",
        "Piotra Skargi",
        "Juliusza Słowackiego",
        "Jana III Sobieskiego",
        "Stalowa",
        "Starowiejska",
        "Stanisława Staszica",
        "Stawowa",
        "Strzelecka",
        "Wita Stwosza",
        "Szczecińska",
        "Szeroka",
        "Szewska",
        "Szpitalna",
        "Śląska",
        "św. Barbary",
        "św. Jana",
        "św. Jerzego",
        "Karola Świerczewskiego",
        "Świętokrzyska",
        "Świętojańska",
        "Targowa",
        "Teatralna",
        "Toruńska",
        "Towarowa",
        "Juliana Tuwima",
        "Uniwersytecka",
        "Warszawska",
        "Wawelska",
        "Wesoła",
        "Wiejska",
        "Wincentego Witosa",
        "Wojska Polskiego",
        "Wolności",
        "Wrocławska",
        "Zamkowa",
        "Złota",
        "Zwycięstwa",
        "Żeglarska",
        "Żelazna",
        "Stefana Żeromskiego",
        "Żytnia"
    };

    bool getCoinFlipResult();
    bool getResultWithSetProbability(unsigned int);

    std::string generateFirstName(SexType);
    std::string generateLastName(SexType);
    std::string generateAddress();
    unsigned int generateID(SexType);

    unsigned int getRandomBirthYear(bool);
    unsigned int getRandomBirthMonth();
    unsigned int getRandomBirthDay(unsigned int, unsigned int);

    unsigned int calculateCheckDigit(std::string);
    std::string getBirthdaySignature(unsigned int year, unsigned int month, unsigned int day);
    bool checkIfGenerated(std::string, unsigned int);

    unsigned long int generatePesel(SexType, Occupation);
    unsigned long int generatePesel();

    template <class T>
    T generateNumber(T minValue, T maxValue) {
        std::mt19937 mersenneTwisterEngine_(std::random_device{}());
        std::uniform_int_distribution<T> distribution(minValue, maxValue);
        return distribution(mersenneTwisterEngine_);
    }
    
    std::shared_ptr<Record> generateNewRecord();

private:
    unsigned int currentYear_ = 2022;
    std::multimap<std::string, unsigned int> generatedIDs_;
};

std::shared_ptr<Record> generateNewRecord();